// Generated by view binder compiler. Do not edit!
package com.example.mobilebank.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.mobilebank.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityRecordBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button RecordBTNConfirm;

  @NonNull
  public final Button RecordBTNEndTime;

  @NonNull
  public final Button RecordBTNReset;

  @NonNull
  public final Button RecordBTNStartTime;

  @NonNull
  public final EditText RecordETMaxMoney;

  @NonNull
  public final EditText RecordETMinMoney;

  @NonNull
  public final ListView RecordMLVRecordList;

  @NonNull
  public final Spinner RecordSPBillType;

  @NonNull
  public final Spinner RecordSPCardType;

  @NonNull
  public final TextView RecordTVEndTime;

  @NonNull
  public final TextView RecordTVStartTime;

  private ActivityRecordBinding(@NonNull LinearLayout rootView, @NonNull Button RecordBTNConfirm,
      @NonNull Button RecordBTNEndTime, @NonNull Button RecordBTNReset,
      @NonNull Button RecordBTNStartTime, @NonNull EditText RecordETMaxMoney,
      @NonNull EditText RecordETMinMoney, @NonNull ListView RecordMLVRecordList,
      @NonNull Spinner RecordSPBillType, @NonNull Spinner RecordSPCardType,
      @NonNull TextView RecordTVEndTime, @NonNull TextView RecordTVStartTime) {
    this.rootView = rootView;
    this.RecordBTNConfirm = RecordBTNConfirm;
    this.RecordBTNEndTime = RecordBTNEndTime;
    this.RecordBTNReset = RecordBTNReset;
    this.RecordBTNStartTime = RecordBTNStartTime;
    this.RecordETMaxMoney = RecordETMaxMoney;
    this.RecordETMinMoney = RecordETMinMoney;
    this.RecordMLVRecordList = RecordMLVRecordList;
    this.RecordSPBillType = RecordSPBillType;
    this.RecordSPCardType = RecordSPCardType;
    this.RecordTVEndTime = RecordTVEndTime;
    this.RecordTVStartTime = RecordTVStartTime;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityRecordBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityRecordBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_record, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityRecordBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Record_BTN_confirm;
      Button RecordBTNConfirm = ViewBindings.findChildViewById(rootView, id);
      if (RecordBTNConfirm == null) {
        break missingId;
      }

      id = R.id.Record_BTN_endTime;
      Button RecordBTNEndTime = ViewBindings.findChildViewById(rootView, id);
      if (RecordBTNEndTime == null) {
        break missingId;
      }

      id = R.id.Record_BTN_reset;
      Button RecordBTNReset = ViewBindings.findChildViewById(rootView, id);
      if (RecordBTNReset == null) {
        break missingId;
      }

      id = R.id.Record_BTN_startTime;
      Button RecordBTNStartTime = ViewBindings.findChildViewById(rootView, id);
      if (RecordBTNStartTime == null) {
        break missingId;
      }

      id = R.id.Record_ET_maxMoney;
      EditText RecordETMaxMoney = ViewBindings.findChildViewById(rootView, id);
      if (RecordETMaxMoney == null) {
        break missingId;
      }

      id = R.id.Record_ET_minMoney;
      EditText RecordETMinMoney = ViewBindings.findChildViewById(rootView, id);
      if (RecordETMinMoney == null) {
        break missingId;
      }

      id = R.id.Record_MLV_recordList;
      ListView RecordMLVRecordList = ViewBindings.findChildViewById(rootView, id);
      if (RecordMLVRecordList == null) {
        break missingId;
      }

      id = R.id.Record_SP_billType;
      Spinner RecordSPBillType = ViewBindings.findChildViewById(rootView, id);
      if (RecordSPBillType == null) {
        break missingId;
      }

      id = R.id.Record_SP_cardType;
      Spinner RecordSPCardType = ViewBindings.findChildViewById(rootView, id);
      if (RecordSPCardType == null) {
        break missingId;
      }

      id = R.id.Record_TV_endTime;
      TextView RecordTVEndTime = ViewBindings.findChildViewById(rootView, id);
      if (RecordTVEndTime == null) {
        break missingId;
      }

      id = R.id.Record_TV_startTime;
      TextView RecordTVStartTime = ViewBindings.findChildViewById(rootView, id);
      if (RecordTVStartTime == null) {
        break missingId;
      }

      return new ActivityRecordBinding((LinearLayout) rootView, RecordBTNConfirm, RecordBTNEndTime,
          RecordBTNReset, RecordBTNStartTime, RecordETMaxMoney, RecordETMinMoney,
          RecordMLVRecordList, RecordSPBillType, RecordSPCardType, RecordTVEndTime,
          RecordTVStartTime);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
